from aiogram import types
from bot import dp, bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from handlers.user import get_post_registration_keyboard
from db.database import get_user_balance

@dp.callback_query_handler(lambda c: c.data == 'task_solution')
async def order_menu(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –µ—â–µ –Ω–µ –±—ã–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
    if user_id not in orders_data:
        orders_data[user_id] = {
            "subject": None,
            "description": None,
            "files": None,
            "deadline": None,
            "check_time": None,
            "price": None
        }

    keyboard = generate_order_menu(user_id)
    await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id, 
                                text="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –ø–æ –º–µ—Ä–µ –µ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!\n\n–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ–ª–µ–π.", reply_markup=keyboard)

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–∫–∞–∑–µ
orders_data = {}

def generate_order_menu(user_id: int) -> InlineKeyboardMarkup:
    user_data = orders_data.get(user_id, {})
    
    keyboard = InlineKeyboardMarkup(row_width=1)
    
    # –ü—Ä–µ–¥–º–µ—Ç
    subject_text = f"–ü—Ä–µ–¥–º–µ—Ç: {user_data['subject']}" if user_data.get("subject") else "–ü—Ä–µ–¥–º–µ—Ç"
    subject_status = "‚úÖ" if user_data.get("subject") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{subject_status} {subject_text}", callback_data="order_subject"))
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description_text = f"–û–ø–∏—Å–∞–Ω–∏–µ: {user_data['description']}" if user_data.get("description") else "–û–ø–∏—Å–∞–Ω–∏–µ"
    description_status = "‚úÖ" if user_data.get("description") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{description_status} {description_text}", callback_data="order_description"))

    # –§–∞–π–ª—ã
    files_text = "–§–∞–π–ª—ã: üìé" if user_data.get("files") else "–§–∞–π–ª—ã"
    files_status = "‚úÖ" if user_data.get("files") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{files_status} {files_text}", callback_data="order_files"))
    
    # –î–µ–¥–ª–∞–π–Ω
    deadline_text = f"–î–µ–¥–ª–∞–π–Ω: {user_data['deadline']}" if user_data.get("deadline") else "–î–µ–¥–ª–∞–π–Ω"
    deadline_status = "‚úÖ" if user_data.get("deadline") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{deadline_status} {deadline_text}", callback_data="order_deadline"))

    # –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    check_time_text = f"–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {user_data['check_time']} –¥–Ω–µ–π" if user_data.get("check_time") else "–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏"
    check_time_status = "‚úÖ" if user_data.get("check_time") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{check_time_status} {check_time_text}", callback_data="order_check_time"))

    # –î–µ–Ω—å–≥–∏
    price_text = f"–ë—é–¥–∂–µ—Ç: {user_data['price']} —Ä—É–±." if user_data.get("price") else "–ë—é–¥–∂–µ—Ç"
    price_status = "‚úÖ" if user_data.get("price") else "‚ùå"
    keyboard.add(InlineKeyboardButton(f"{price_status} {price_text}", callback_data="order_price"))
    
    
    keyboard.add(InlineKeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_complite"))
    keyboard.add(InlineKeyboardButton("üóë –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order_cancel"))
    keyboard.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="order_back"))
    
    return keyboard



@dp.callback_query_handler(lambda c: c.data == 'order_back')
async def order_back_to_selection(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    order_keyboard = generate_order_selection_menu()
    
    await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id, 
                                text="üìÑ –í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã! \n\n"
                         "‚Ä¢ –†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á ‚Äî –æ—Ç–ø—Ä–∞–≤—å –Ω–∞–º –∑–∞–¥–∞–Ω–∏–µ, –∏ –º—ã –ø–æ–º–æ–∂–µ–º –µ–≥–æ —Ä–µ—à–∏—Ç—å. –§–∞–π–ª—ã –º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ–∑–∂–µ.\n\n"
                         "‚Ä¢ –ü–æ–º–æ—â—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ ‚Äî –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤–æ –≤—Ä–µ–º—è —ç–∫–∑–∞–º–µ–Ω–∞? –ü—Ä–∏–∫—Ä–µ–ø–∏ –ø—Ä–∏–º–µ—Ä—ã –∑–∞–¥–∞–Ω–∏–π –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É. –ú—ã –Ω–∞–π–¥–µ–º —Ä–µ—à–∞—Ç–µ–ª–µ–π, –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–º–æ—á—å.\n\n"
                         "‚Ä¢ –ü—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚Äî –µ—Å–ª–∏ —Ç—ã —É–∂–µ –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É –∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å —Å–µ–π—á–∞—Å. –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ä–∞–±–æ—Ç—É, –∏ –º—ã –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ –æ—Ç–≤–µ—Ç–∏–º!", reply_markup=order_keyboard)

def generate_order_selection_menu() -> InlineKeyboardMarkup:
    order_keyboard = InlineKeyboardMarkup()
    order_keyboard.add(InlineKeyboardButton("–†–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á", callback_data="task_solution"))
    order_keyboard.add(InlineKeyboardButton("–ü–æ–º–æ—â—å –Ω–∞ —ç–∫–∑–∞–º–µ–Ω–µ", callback_data="exam_help"))
    order_keyboard.add(InlineKeyboardButton("–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data="right_now"))
    order_keyboard.add(InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_main_order"))
    
    return order_keyboard


@dp.callback_query_handler(lambda c: c.data == 'order_cancel')
async def order_cancel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    cancel_keyboard = InlineKeyboardMarkup(row_width=2)
    cancel_keyboard.add(InlineKeyboardButton("–î–∞, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="confirm_cancel"))
    cancel_keyboard.add(InlineKeyboardButton("–ù–µ—Ç, –ø—Ä–æ–¥–æ–ª–∂—É –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="continue_order"))

    await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                text="–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é?", reply_markup=cancel_keyboard)

@dp.callback_query_handler(lambda c: c.data == 'confirm_cancel')
async def confirm_cancel(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id

    # –£–¥–∞–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_id in orders_data:
        del orders_data[user_id]
    
    current_balance = await get_user_balance(user_id)
    post_registration_keyboard = get_post_registration_keyboard(current_balance)
    
    await bot.edit_message_text(chat_id=user_id, message_id=callback_query.message.message_id,
                                text="üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ª—É—á—à–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –∏ –Ω–∞–¥–µ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å —Å —É—á–µ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏ –ø–æ–≥—Ä—É–∑–∏—Ç–µ—Å—å –≤ –º–∏—Ä –∑–Ω–∞–Ω–∏–π —Å –Ω–∞–º–∏!", reply_markup=post_registration_keyboard)


@dp.callback_query_handler(lambda c: c.data == 'continue_order')
async def continue_order(callback_query: types.CallbackQuery):
    await order_menu(callback_query)

